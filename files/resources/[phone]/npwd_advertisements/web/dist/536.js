"use strict";(self.webpackChunknpwd_advertisements=self.webpackChunknpwd_advertisements||[]).push([[536],{7536:(e,r,t)=>{t.r(r),t.d(r,{Controller:()=>N,FormProvider:()=>x,appendErrors:()=>M,get:()=>m,set:()=>q,useController:()=>T,useFieldArray:()=>_e,useForm:()=>Be,useFormContext:()=>A,useFormState:()=>C,useWatch:()=>B});var s=t(2950),a=e=>"checkbox"===e.type,n=e=>e instanceof Date,i=e=>null==e;const o=e=>"object"==typeof e;var u=e=>!i(e)&&!Array.isArray(e)&&o(e)&&!n(e),l=e=>u(e)&&e.target?a(e.target)?e.target.checked:e.target.value:e,c=(e,r)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(r)),d=e=>Array.isArray(e)?e.filter(Boolean):[],f=e=>void 0===e,m=(e,r,t)=>{if(!r||!u(e))return t;const s=d(r.split(/[,[\].]+?/)).reduce(((e,r)=>i(e)?e:e[r]),e);return f(s)||s===e?f(e[r])?t:e[r]:s};const y="blur",g="onChange",h="onSubmit",p="all",_="pattern",v="required",b=s.createContext(null),A=()=>s.useContext(b),x=e=>{const{children:r,...t}=e;return s.createElement(b.Provider,{value:t},r)};var F=(e,r,t,s=!0)=>{const a={};for(const n in e)Object.defineProperty(a,n,{get:()=>{const a=n;return r[a]!==p&&(r[a]=!s||p),t&&(t[a]=!0),e[a]}});return a},V=e=>u(e)&&!Object.keys(e).length,w=(e,r,t)=>{const{name:s,...a}=e;return V(a)||Object.keys(a).length>=Object.keys(r).length||Object.keys(a).find((e=>r[e]===(!t||p)))},S=e=>Array.isArray(e)?e:[e],k=(e,r,t)=>t&&r?e===r:!e||!r||e===r||S(e).some((e=>e&&(e.startsWith(r)||r.startsWith(e))));function D(e){const r=s.useRef(e);r.current=e,s.useEffect((()=>{const t=!e.disabled&&r.current.subject.subscribe({next:r.current.callback});return()=>(e=>{e&&e.unsubscribe()})(t)}),[e.disabled])}function C(e){const r=A(),{control:t=r.control,disabled:a,name:n,exact:i}=e||{},[o,u]=s.useState(t._formState),l=s.useRef({isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1}),c=s.useRef(n),d=s.useRef(!0);return c.current=n,D({disabled:a,callback:s.useCallback((e=>d.current&&k(c.current,e.name,i)&&w(e,l.current)&&u({...t._formState,...e})),[t,i]),subject:t._subjects.state}),s.useEffect((()=>(d.current=!0,()=>{d.current=!1})),[]),F(o,t._proxyFormState,l.current,!1)}var j=e=>"string"==typeof e,E=(e,r,t,s)=>{const a=Array.isArray(e);return j(e)?(s&&r.watch.add(e),m(t,e)):a?e.map((e=>(s&&r.watch.add(e),m(t,e)))):(s&&(r.watchAll=!0),t)},O=e=>"function"==typeof e,U=e=>{for(const r in e)if(O(e[r]))return!0;return!1};function B(e){const r=A(),{control:t=r.control,name:a,defaultValue:n,disabled:i,exact:o}=e||{},l=s.useRef(a);l.current=a;const c=s.useCallback((e=>{if(k(l.current,e.name,o)){const r=E(l.current,t._names,e.values||t._formValues);m(f(l.current)||u(r)&&!U(r)?{...r}:Array.isArray(r)?[...r]:f(r)?n:r)}}),[t,o,n]);D({disabled:i,subject:t._subjects.watch,callback:c});const[d,m]=s.useState(f(n)?t._getWatch(a):n);return s.useEffect((()=>{t._removeUnmounted()})),d}function T(e){const r=A(),{name:t,control:a=r.control,shouldUnregister:n}=e,i=c(a._names.array,t),o=B({control:a,name:t,defaultValue:m(a._formValues,t,m(a._defaultValues,t,e.defaultValue)),exact:!0}),u=C({control:a,name:t}),d=s.useRef(a.register(t,{...e.rules,value:o}));return s.useEffect((()=>{const e=(e,r)=>{const t=m(a._fields,e);t&&(t._f.mount=r)};return e(t,!0),()=>{const r=a._options.shouldUnregister||n;(i?r&&!a._stateFlags.action:r)?a.unregister(t):e(t,!1)}}),[t,a,i,n]),{field:{name:t,value:o,onChange:s.useCallback((e=>{d.current.onChange({target:{value:l(e),name:t},type:"change"})}),[t]),onBlur:s.useCallback((()=>{d.current.onBlur({target:{value:m(a._formValues,t),name:t},type:y})}),[t,a]),ref:s.useCallback((e=>{const r=m(a._fields,t);e&&r&&e.focus&&(r._f.ref={focus:()=>e.focus(),select:()=>e.select(),setCustomValidity:r=>e.setCustomValidity(r),reportValidity:()=>e.reportValidity()})}),[t,a._fields])},formState:u,fieldState:Object.defineProperties({},{invalid:{get:()=>!!m(u.errors,t)},isDirty:{get:()=>!!m(u.dirtyFields,t)},isTouched:{get:()=>!!m(u.touchedFields,t)},error:{get:()=>m(u.errors,t)}})}}const N=e=>e.render(T(e));var M=(e,r,t,s,a)=>r?{...t[e],types:{...t[e]&&t[e].types?t[e].types:{},[s]:a||!0}}:{},L=e=>/^\w*$/.test(e),R=e=>d(e.replace(/["|']|\]/g,"").split(/\.|\[/));function q(e,r,t){let s=-1;const a=L(r)?[r]:R(r),n=a.length,i=n-1;for(;++s<n;){const r=a[s];let n=t;if(s!==i){const t=e[r];n=u(t)||Array.isArray(t)?t:isNaN(+a[s+1])?{}:[]}e[r]=n,e=e[r]}return e}const W=(e,r,t)=>{for(const s of t||Object.keys(e)){const t=m(e,s);if(t){const{_f:e,...s}=t;if(e&&r(e.name)){if(e.ref.focus&&f(e.ref.focus()))break;if(e.refs){e.refs[0].focus();break}}else u(s)&&W(s,r)}}};var $=()=>{const e="undefined"==typeof performance?Date.now():1e3*performance.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(r=>{const t=(16*Math.random()+e)%16|0;return("x"==r?t:3&t|8).toString(16)}))},I=(e,r,t={})=>t.shouldFocus||f(t.shouldFocus)?t.focusName||`${e}.${f(t.focusIndex)?r:t.focusIndex}.`:"",P=(e,r,t)=>!t&&(r.watchAll||r.watch.has(e)||[...r.watch].some((r=>e.startsWith(r)&&/^\.\w+/.test(e.slice(r.length))))),H=(e,r,t)=>{const s=d(m(e,t));return q(s,"root",r[t]),q(e,t,s),e},z=e=>"boolean"==typeof e,G=e=>"file"===e.type,J=e=>j(e)||s.isValidElement(e),K=e=>"radio"===e.type,Q=e=>e instanceof RegExp;const X={value:!1,isValid:!1},Y={value:!0,isValid:!0};var Z=e=>{if(Array.isArray(e)){if(e.length>1){const r=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:r,isValid:!!r.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!f(e[0].attributes.value)?f(e[0].value)||""===e[0].value?Y:{value:e[0].value,isValid:!0}:Y:X}return X};const ee={isValid:!1,value:null};var re=e=>Array.isArray(e)?e.reduce(((e,r)=>r&&r.checked&&!r.disabled?{isValid:!0,value:r.value}:e),ee):ee;function te(e,r,t="validate"){if(J(e)||Array.isArray(e)&&e.every(J)||z(e)&&!e)return{type:t,message:J(e)?e:"",ref:r}}var se=e=>u(e)&&!Q(e)?e:{value:e,message:""},ae=async(e,r,t,s,n)=>{const{ref:o,refs:l,required:c,maxLength:d,minLength:f,min:m,max:y,pattern:g,validate:h,name:p,valueAsNumber:b,mount:A,disabled:x}=e._f;if(!A||x)return{};const F=l?l[0]:o,w=e=>{s&&F.reportValidity&&(F.setCustomValidity(z(e)?"":e||" "),F.reportValidity())},S={},k=K(o),D=a(o),C=k||D,E=(b||G(o))&&!o.value||""===r||Array.isArray(r)&&!r.length,U=M.bind(null,p,t,S),B=(e,r,t,s="maxLength",a="minLength")=>{const n=e?r:t;S[p]={type:e?s:a,message:n,ref:o,...U(e?s:a,n)}};if(n?!Array.isArray(r)||!r.length:c&&(!C&&(E||i(r))||z(r)&&!r||D&&!Z(l).isValid||k&&!re(l).isValid)){const{value:e,message:r}=J(c)?{value:!!c,message:c}:se(c);if(e&&(S[p]={type:v,message:r,ref:F,...U(v,r)},!t))return w(r),S}if(!(E||i(m)&&i(y))){let e,s;const a=se(y),n=se(m);if(i(r)||isNaN(r)){const t=o.valueAsDate||new Date(r);j(a.value)&&(e=t>new Date(a.value)),j(n.value)&&(s=t<new Date(n.value))}else{const t=o.valueAsNumber||+r;i(a.value)||(e=t>a.value),i(n.value)||(s=t<n.value)}if((e||s)&&(B(!!e,a.message,n.message,"max","min"),!t))return w(S[p].message),S}if((d||f)&&!E&&(j(r)||n&&Array.isArray(r))){const e=se(d),s=se(f),a=!i(e.value)&&r.length>e.value,n=!i(s.value)&&r.length<s.value;if((a||n)&&(B(a,e.message,s.message),!t))return w(S[p].message),S}if(g&&!E&&j(r)){const{value:e,message:s}=se(g);if(Q(e)&&!r.match(e)&&(S[p]={type:_,message:s,ref:o,...U(_,s)},!t))return w(s),S}if(h)if(O(h)){const e=te(await h(r),F);if(e&&(S[p]={...e,...U("validate",e.message)},!t))return w(e.message),S}else if(u(h)){let e={};for(const s in h){if(!V(e)&&!t)break;const a=te(await h[s](r),F,s);a&&(e={...a,...U(s,a.message)},w(a.message),t&&(S[p]=e))}if(!V(e)&&(S[p]={ref:F,...e},!t))return S}return w(!0),S};function ne(e,r){return[...e,...S(r)]}var ie="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function oe(e){let r;const t=Array.isArray(e);if(e instanceof Date)r=new Date(e);else if(e instanceof Set)r=new Set(e);else{if(ie&&(e instanceof Blob||e instanceof FileList)||!t&&!u(e))return e;r=t?[]:{};for(const t in e){if(O(e[t])){r=e;break}r[t]=oe(e[t])}}return r}var ue=e=>Array.isArray(e)?e.map((()=>{})):void 0,le=e=>({isOnSubmit:!e||e===h,isOnBlur:"onBlur"===e,isOnChange:e===g,isOnAll:e===p,isOnTouch:"onTouched"===e});function ce(e,r,t){return[...e.slice(0,r),...S(t),...e.slice(r)]}var de=(e,r,t)=>Array.isArray(e)?(f(e[t])&&(e[t]=void 0),e.splice(t,0,e.splice(r,1)[0]),e):[];function fe(e,r){return[...S(r),...S(e)]}var me=(e,r)=>f(r)?[]:function(e,r){let t=0;const s=[...e];for(const e of r)s.splice(e-t,1),t++;return d(s).length?s:[]}(e,S(r).sort(((e,r)=>e-r))),ye=(e,r,t)=>{e[r]=[e[t],e[t]=e[r]][0]};function ge(e){for(const r in e)if(!f(e[r]))return!1;return!0}function he(e,r){const t=L(r)?[r]:R(r),s=1==t.length?e:function(e,r){const t=r.slice(0,-1).length;let s=0;for(;s<t;)e=f(e)?s++:e[r[s++]];return e}(e,t),a=t[t.length-1];let n;s&&delete s[a];for(let r=0;r<t.slice(0,-1).length;r++){let s,a=-1;const i=t.slice(0,-(r+1)),o=i.length-1;for(r>0&&(n=e);++a<i.length;){const r=i[a];s=s?s[r]:e[r],o===a&&(u(s)&&V(s)||Array.isArray(s)&&ge(s))&&(n?delete n[r]:delete e[r]),n=s}}return e}var pe=(e,r,t)=>(e[r]=t,e);function _e(e){const r=A(),{control:t=r.control,name:a,keyName:n="id",shouldUnregister:i}=e,[o,u]=s.useState(t._getFieldArray(a)),l=s.useRef(t._getFieldArray(a).map($)),c=s.useRef(o),d=s.useRef(a),f=s.useRef(!1);d.current=a,c.current=o,t._names.array.add(a),e.rules&&t.register(a,e.rules),D({callback:s.useCallback((({values:e,name:r})=>{if(r===d.current||!r){const r=m(e,d.current,[]);u(r),l.current=r.map($)}}),[]),subject:t._subjects.array});const y=s.useCallback((e=>{f.current=!0,t._updateFieldArray(a,e)}),[t,a]);return s.useEffect((()=>{if(t._stateFlags.action=!1,P(a,t._names)&&t._subjects.state.next({}),f.current)if(t._options.resolver)t._executeSchema([a]).then((e=>{const r=m(e.errors,a),s=m(t._formState.errors,a);(s?!r&&s.type:r&&r.type)&&(r?q(t._formState.errors,a,r):he(t._formState.errors,a),t._subjects.state.next({errors:t._formState.errors}))}));else{const e=m(t._fields,a);(!le(t._options.mode).isOnSubmit||t._formState.isSubmitted)&&e&&e._f&&ae(e,m(t._formValues,a),t._options.criteriaMode===p,t._options.shouldUseNativeValidation,!0).then((e=>!V(e)&&t._subjects.state.next({errors:H(t._formState.errors,e,a)})))}t._subjects.watch.next({name:a,values:t._formValues}),t._names.focus&&W(t._fields,(e=>e.startsWith(t._names.focus))),t._names.focus="",t._proxyFormState.isValid&&t._updateValid()}),[o,a,t]),s.useEffect((()=>(!m(t._formValues,a)&&t._updateFieldArray(a),()=>{(t._options.shouldUnregister||i)&&t.unregister(a)})),[a,t,n,i]),{swap:s.useCallback(((e,r)=>{const s=t._getFieldArray(a);ye(s,e,r),ye(l.current,e,r),y(s),u(s),t._updateFieldArray(a,s,ye,{argA:e,argB:r},!1)}),[y,a,t]),move:s.useCallback(((e,r)=>{const s=t._getFieldArray(a);de(s,e,r),de(l.current,e,r),y(s),u(s),t._updateFieldArray(a,s,de,{argA:e,argB:r},!1)}),[y,a,t]),prepend:s.useCallback(((e,r)=>{const s=S(oe(e)),n=fe(t._getFieldArray(a),s);t._names.focus=I(a,0,r),l.current=fe(l.current,s.map($)),y(n),u(n),t._updateFieldArray(a,n,fe,{argA:ue(e)})}),[y,a,t]),append:s.useCallback(((e,r)=>{const s=S(oe(e)),n=ne(t._getFieldArray(a),s);t._names.focus=I(a,n.length-1,r),l.current=ne(l.current,s.map($)),y(n),u(n),t._updateFieldArray(a,n,ne,{argA:ue(e)})}),[y,a,t]),remove:s.useCallback((e=>{const r=me(t._getFieldArray(a),e);l.current=me(l.current,e),y(r),u(r),t._updateFieldArray(a,r,me,{argA:e})}),[y,a,t]),insert:s.useCallback(((e,r,s)=>{const n=S(oe(r)),i=ce(t._getFieldArray(a),e,n);t._names.focus=I(a,e,s),l.current=ce(l.current,e,n.map($)),y(i),u(i),t._updateFieldArray(a,i,ce,{argA:e,argB:ue(r)})}),[y,a,t]),update:s.useCallback(((e,r)=>{const s=oe(r),n=pe(t._getFieldArray(a),e,s);l.current=[...n].map(((r,t)=>r&&t!==e?l.current[t]:$())),y(n),u([...n]),t._updateFieldArray(a,n,pe,{argA:e,argB:s},!0,!1)}),[y,a,t]),replace:s.useCallback((e=>{const r=S(oe(e));l.current=r.map($),y([...r]),u([...r]),t._updateFieldArray(a,[...r],(e=>e),{},!0,!1)}),[y,a,t]),fields:s.useMemo((()=>o.map(((e,r)=>({...e,[n]:l.current[r]||$()})))),[o,n])}}function ve(){let e=[];return{get observers(){return e},next:r=>{for(const t of e)t.next(r)},subscribe:r=>(e.push(r),{unsubscribe:()=>{e=e.filter((e=>e!==r))}}),unsubscribe:()=>{e=[]}}}var be=e=>i(e)||!o(e);function Ae(e,r){if(be(e)||be(r))return e===r;if(n(e)&&n(r))return e.getTime()===r.getTime();const t=Object.keys(e),s=Object.keys(r);if(t.length!==s.length)return!1;for(const a of t){const t=e[a];if(!s.includes(a))return!1;if("ref"!==a){const e=r[a];if(n(t)&&n(e)||u(t)&&u(e)||Array.isArray(t)&&Array.isArray(e)?!Ae(t,e):t!==e)return!1}}return!0}var xe=e=>{const r=e?e.ownerDocument:0;return e instanceof(r&&r.defaultView?r.defaultView.HTMLElement:HTMLElement)},Fe=e=>"select-multiple"===e.type,Ve=e=>xe(e)&&e.isConnected;function we(e,r={}){const t=Array.isArray(e);if(u(e)||t)for(const t in e)Array.isArray(e[t])||u(e[t])&&!U(e[t])?(r[t]=Array.isArray(e[t])?[]:{},we(e[t],r[t])):i(e[t])||(r[t]=!0);return r}function Se(e,r,t){const s=Array.isArray(e);if(u(e)||s)for(const s in e)Array.isArray(e[s])||u(e[s])&&!U(e[s])?f(r)||be(t[s])?t[s]=Array.isArray(e[s])?we(e[s],[]):{...we(e[s])}:Se(e[s],i(r)?{}:r[s],t[s]):t[s]=!Ae(e[s],r[s]);return t}var ke=(e,r)=>Se(e,r,we(r)),De=(e,{valueAsNumber:r,valueAsDate:t,setValueAs:s})=>f(e)?e:r?""===e||i(e)?NaN:+e:t&&j(e)?new Date(e):s?s(e):e;function Ce(e){const r=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):r.disabled))return G(r)?r.files:K(r)?re(e.refs).value:Fe(r)?[...r.selectedOptions].map((({value:e})=>e)):a(r)?Z(e.refs).value:De(f(r.value)?e.ref.value:r.value,e)}var je=e=>f(e)?void 0:Q(e)?e.source:u(e)?Q(e.value)?e.value.source:e.value:e;function Ee(e,r,t){const s=m(e,t);if(s||L(t))return{error:s,name:t};const a=t.split(".");for(;a.length;){const s=a.join("."),n=m(r,s),i=m(e,s);if(n&&!Array.isArray(n)&&t!==s)return{name:t};if(i&&i.type)return{name:s,error:i};a.pop()}return{name:t}}const Oe={mode:h,reValidateMode:g,shouldFocusError:!0};function Ue(e={}){let r,t={...Oe,...e},s={isDirty:!1,isValidating:!1,dirtyFields:{},isSubmitted:!1,submitCount:0,touchedFields:{},isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,errors:{}},o={},u=oe(t.defaultValues)||{},g=t.shouldUnregister?{}:oe(u),h={action:!1,mount:!1,watch:!1},_={mount:new Set,unMount:new Set,array:new Set,watch:new Set},v=0,b={};const A={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},x={watch:ve(),array:ve(),state:ve()},F=le(t.mode),w=le(t.reValidateMode),k=t.criteriaMode===p,D=async e=>{let r=!1;return A.isValid&&(r=t.resolver?V((await B()).errors):await T(o,!0),e||r===s.isValid||(s.isValid=r,x.state.next({isValid:r}))),r},C=(e,r,t,s)=>{const a=m(o,e);if(a){const n=m(g,e,f(t)?m(u,e):t);f(n)||s&&s.defaultChecked||r?q(g,e,r?n:Ce(a._f)):L(e,n),h.mount&&D()}},U=(e,r,t,a,n)=>{let i=!1;const o={name:e},l=m(s.touchedFields,e);if(A.isDirty){const e=s.isDirty;s.isDirty=o.isDirty=N(),i=e!==o.isDirty}if(A.dirtyFields&&(!t||a)){const t=m(s.dirtyFields,e);Ae(m(u,e),r)?he(s.dirtyFields,e):q(s.dirtyFields,e,!0),o.dirtyFields=s.dirtyFields,i=i||t!==m(s.dirtyFields,e)}return t&&!l&&(q(s.touchedFields,e,t),o.touchedFields=s.touchedFields,i=i||A.touchedFields&&l!==t),i&&n&&x.state.next(o),i?o:{}},B=async e=>t.resolver?await t.resolver({...g},t.context,((e,r,t,s)=>{const a={};for(const t of e){const e=m(r,t);e&&q(a,t,e._f)}return{criteriaMode:t,names:[...e],fields:a,shouldUseNativeValidation:s}})(e||_.mount,o,t.criteriaMode,t.shouldUseNativeValidation)):{},T=async(e,r,a={valid:!0})=>{for(const n in e){const i=e[n];if(i){const{_f:e,...n}=i;if(e){const n=_.array.has(e.name),o=await ae(i,m(g,e.name),k,t.shouldUseNativeValidation,n);if(o[e.name]&&(a.valid=!1,r))break;!r&&(m(o,e.name)?n?H(s.errors,o,e.name):q(s.errors,e.name,o[e.name]):he(s.errors,e.name))}n&&await T(n,r,a)}}return a.valid},N=(e,r)=>(e&&r&&q(g,e,r),!Ae(Q(),u)),M=(e,r,t)=>{const s={...h.mount?g:f(r)?u:j(e)?{[e]:r}:r};return E(e,_,s,t)},L=(e,r,t={})=>{const s=m(o,e);let n=r;if(s){const t=s._f;t&&(!t.disabled&&q(g,e,De(r,t)),n=ie&&xe(t.ref)&&i(r)?"":r,Fe(t.ref)?[...t.ref.options].forEach((e=>e.selected=n.includes(e.value))):t.refs?a(t.ref)?t.refs.length>1?t.refs.forEach((e=>!e.disabled&&(e.checked=Array.isArray(n)?!!n.find((r=>r===e.value)):n===e.value))):t.refs[0]&&(t.refs[0].checked=!!n):t.refs.forEach((e=>e.checked=e.value===n)):G(t.ref)?t.ref.value="":(t.ref.value=n,t.ref.type||x.watch.next({name:e})))}(t.shouldDirty||t.shouldTouch)&&U(e,n,t.shouldTouch,t.shouldDirty,!0),t.shouldValidate&&J(e)},R=(e,r,t)=>{for(const s in r){const a=r[s],i=`${e}.${s}`,u=m(o,i);!_.array.has(e)&&be(a)&&(!u||u._f)||n(a)?L(i,a,t):R(i,a,t)}},$=(e,r,t={})=>{const a=m(o,e),n=_.array.has(e),l=oe(r);q(g,e,l),n?(x.array.next({name:e,values:g}),(A.isDirty||A.dirtyFields)&&t.shouldDirty&&(s.dirtyFields=ke(u,g),x.state.next({name:e,dirtyFields:s.dirtyFields,isDirty:N(e,l)}))):!a||a._f||i(l)?L(e,l,t):R(e,l,t),P(e,_)&&x.state.next({}),x.watch.next({name:e})},I=async a=>{const n=a.target;let i=n.name;const u=m(o,i);if(u){let d,f;const h=n.type?Ce(u._f):l(a),p=a.type===y||"focusout"===a.type,S=!((c=u._f).mount&&(c.required||c.min||c.max||c.maxLength||c.minLength||c.pattern||c.validate)||t.resolver||m(s.errors,i)||u._f.deps)||((e,r,t,s,a)=>!a.isOnAll&&(!t&&a.isOnTouch?!(r||e):(t?s.isOnBlur:a.isOnBlur)?!e:!(t?s.isOnChange:a.isOnChange)||e))(p,m(s.touchedFields,i),s.isSubmitted,w,F),C=P(i,_,p);q(g,i,h),p?(u._f.onBlur&&u._f.onBlur(a),r&&r(0)):u._f.onChange&&u._f.onChange(a);const j=U(i,h,p,!1),E=!V(j)||C;if(!p&&x.watch.next({name:i,type:a.type}),S)return E&&x.state.next({name:i,...C?{}:j});if(!p&&C&&x.state.next({}),b[i]=(b[i],1),x.state.next({isValidating:!0}),t.resolver){const{errors:e}=await B([i]),r=Ee(s.errors,o,i),t=Ee(e,o,r.name||i);d=t.error,i=t.name,f=V(e)}else d=(await ae(u,m(g,i),k,t.shouldUseNativeValidation))[i],f=await D(!0);u._f.deps&&J(u._f.deps),(async(t,a,n,i)=>{const o=m(s.errors,t),u=A.isValid&&s.isValid!==a;var l;if(e.delayError&&n?(l=()=>((e,r)=>{q(s.errors,e,r),x.state.next({errors:s.errors})})(t,n),r=e=>{clearTimeout(v),v=window.setTimeout(l,e)},r(e.delayError)):(clearTimeout(v),r=null,n?q(s.errors,t,n):he(s.errors,t)),(n?!Ae(o,n):o)||!V(i)||u){const e={...i,...u?{isValid:a}:{},errors:s.errors,name:t};s={...s,...e},x.state.next(e)}b[t]--,A.isValidating&&!Object.values(b).some((e=>e))&&(x.state.next({isValidating:!1}),b={})})(i,f,d,j)}var c},J=async(e,r={})=>{let a,n;const i=S(e);if(x.state.next({isValidating:!0}),t.resolver){const r=await(async e=>{const{errors:r}=await B();if(e)for(const t of e){const e=m(r,t);e?q(s.errors,t,e):he(s.errors,t)}else s.errors=r;return r})(f(e)?e:i);a=V(r),n=e?!i.some((e=>m(r,e))):a}else e?(n=(await Promise.all(i.map((async e=>{const r=m(o,e);return await T(r&&r._f?{[e]:r}:r)})))).every(Boolean),(n||s.isValid)&&D()):n=a=await T(o);return x.state.next({...!j(e)||A.isValid&&a!==s.isValid?{}:{name:e},...t.resolver?{isValid:a}:{},errors:s.errors,isValidating:!1}),r.shouldFocus&&!n&&W(o,(e=>m(s.errors,e)),e?i:_.mount),n},Q=e=>{const r={...u,...h.mount?g:{}};return f(e)?r:j(e)?m(r,e):e.map((e=>m(r,e)))},X=(e,r)=>({invalid:!!m((r||s).errors,e),isDirty:!!m((r||s).dirtyFields,e),isTouched:!!m((r||s).touchedFields,e),error:m((r||s).errors,e)}),Y=(e,r={})=>{for(const a of e?S(e):_.mount)_.mount.delete(a),_.array.delete(a),m(o,a)&&(r.keepValue||(he(o,a),he(g,a)),!r.keepError&&he(s.errors,a),!r.keepDirty&&he(s.dirtyFields,a),!r.keepTouched&&he(s.touchedFields,a),!t.shouldUnregister&&!r.keepDefaultValue&&he(u,a));x.watch.next({}),x.state.next({...s,...r.keepDirty?{isDirty:N()}:{}}),!r.keepIsValid&&D()},Z=(e,r={})=>{let s=m(o,e);const n=z(r.disabled);return q(o,e,{_f:{...s&&s._f?s._f:{ref:{name:e}},name:e,mount:!0,...r}}),_.mount.add(e),s?n&&q(g,e,r.disabled?void 0:m(g,e,Ce(s._f))):C(e,!0,r.value),{...n?{disabled:r.disabled}:{},...t.shouldUseNativeValidation?{required:!!r.required,min:je(r.min),max:je(r.max),minLength:je(r.minLength),maxLength:je(r.maxLength),pattern:je(r.pattern)}:{},name:e,onChange:I,onBlur:I,ref:n=>{if(n){Z(e,r),s=m(o,e);const t=f(n.value)&&n.querySelectorAll&&n.querySelectorAll("input,select,textarea")[0]||n,i=(e=>K(e)||a(e))(t),l=s._f.refs||[];if(i?l.find((e=>e===t)):t===s._f.ref)return;q(o,e,{_f:{...s._f,...i?{refs:[...l.filter(Ve),t,...Array.isArray(m(u,e))?[{}]:[]],ref:{type:t.type,name:e}}:{ref:t}}}),C(e,!1,void 0,t)}else s=m(o,e,{}),s._f&&(s._f.mount=!1),(t.shouldUnregister||r.shouldUnregister)&&(!c(_.array,e)||!h.action)&&_.unMount.add(e)}}};return{control:{register:Z,unregister:Y,getFieldState:X,_executeSchema:B,_getWatch:M,_getDirty:N,_updateValid:D,_removeUnmounted:()=>{for(const e of _.unMount){const r=m(o,e);r&&(r._f.refs?r._f.refs.every((e=>!Ve(e))):!Ve(r._f.ref))&&Y(e)}_.unMount=new Set},_updateFieldArray:(e,r=[],t,a,n=!0,i=!0)=>{if(a&&t){if(h.action=!0,i&&Array.isArray(m(o,e))){const r=t(m(o,e),a.argA,a.argB);n&&q(o,e,r)}if(A.errors&&i&&Array.isArray(m(s.errors,e))){const r=t(m(s.errors,e),a.argA,a.argB);n&&q(s.errors,e,r),((e,r)=>{!d(m(e,r)).length&&he(e,r)})(s.errors,e)}if(A.touchedFields&&i&&Array.isArray(m(s.touchedFields,e))){const r=t(m(s.touchedFields,e),a.argA,a.argB);n&&q(s.touchedFields,e,r)}A.dirtyFields&&(s.dirtyFields=ke(u,g)),x.state.next({isDirty:N(e,r),dirtyFields:s.dirtyFields,errors:s.errors,isValid:s.isValid})}else q(g,e,r)},_getFieldArray:r=>d(m(h.mount?g:u,r,e.shouldUnregister?m(u,r,[]):[])),_subjects:x,_proxyFormState:A,get _fields(){return o},get _formValues(){return g},get _stateFlags(){return h},set _stateFlags(e){h=e},get _defaultValues(){return u},get _names(){return _},set _names(e){_=e},get _formState(){return s},set _formState(e){s=e},get _options(){return t},set _options(e){t={...t,...e}}},trigger:J,register:Z,handleSubmit:(e,r)=>async a=>{a&&(a.preventDefault&&a.preventDefault(),a.persist&&a.persist());let n=!0,i=oe(g);x.state.next({isSubmitting:!0});try{if(t.resolver){const{errors:e,values:r}=await B();s.errors=e,i=r}else await T(o);V(s.errors)?(x.state.next({errors:{},isSubmitting:!0}),await e(i,a)):(r&&await r({...s.errors},a),t.shouldFocusError&&W(o,(e=>m(s.errors,e)),_.mount))}catch(e){throw n=!1,e}finally{s.isSubmitted=!0,x.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:V(s.errors)&&n,submitCount:s.submitCount+1,errors:s.errors})}},watch:(e,r)=>O(e)?x.watch.subscribe({next:t=>e(M(void 0,r),t)}):M(e,r,!0),setValue:$,getValues:Q,reset:(r,t={})=>{const a=r||u,n=oe(a),i=r&&!V(r)?n:u;if(t.keepDefaultValues||(u=a),!t.keepValues){if(t.keepDirtyValues)for(const e of _.mount)m(s.dirtyFields,e)?q(i,e,m(g,e)):$(e,m(i,e));else{if(ie&&f(r))for(const e of _.mount){const r=m(o,e);if(r&&r._f){const e=Array.isArray(r._f.refs)?r._f.refs[0]:r._f.ref;try{if(xe(e)){e.closest("form").reset();break}}catch(e){}}}o={}}g=e.shouldUnregister?t.keepDefaultValues?oe(u):{}:n,x.array.next({values:i}),x.watch.next({values:i})}_={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},h.mount=!A.isValid||!!t.keepIsValid,h.watch=!!e.shouldUnregister,x.state.next({submitCount:t.keepSubmitCount?s.submitCount:0,isDirty:t.keepDirty||t.keepDirtyValues?s.isDirty:!(!t.keepDefaultValues||Ae(r,u)),isSubmitted:!!t.keepIsSubmitted&&s.isSubmitted,dirtyFields:t.keepDirty||t.keepDirtyValues?s.dirtyFields:t.keepDefaultValues&&r?ke(u,r):{},touchedFields:t.keepTouched?s.touchedFields:{},errors:t.keepErrors?s.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})},resetField:(e,r={})=>{m(o,e)&&(f(r.defaultValue)?$(e,m(u,e)):($(e,r.defaultValue),q(u,e,r.defaultValue)),r.keepTouched||he(s.touchedFields,e),r.keepDirty||(he(s.dirtyFields,e),s.isDirty=r.defaultValue?N(e,m(u,e)):N()),r.keepError||(he(s.errors,e),A.isValid&&D()),x.state.next({...s}))},clearErrors:e=>{e?S(e).forEach((e=>he(s.errors,e))):s.errors={},x.state.next({errors:s.errors})},unregister:Y,setError:(e,r,t)=>{const a=(m(o,e,{_f:{}})._f||{}).ref;q(s.errors,e,{...r,ref:a}),x.state.next({name:e,errors:s.errors,isValid:!1}),t&&t.shouldFocus&&a&&a.focus&&a.focus()},setFocus:(e,r={})=>{const t=m(o,e)._f,s=t.refs?t.refs[0]:t.ref;s.focus(),r.shouldSelect&&s.select()},getFieldState:X}}function Be(e={}){const r=s.useRef(),[t,a]=s.useState({isDirty:!1,isValidating:!1,dirtyFields:{},isSubmitted:!1,submitCount:0,touchedFields:{},isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,errors:{}});r.current?r.current.control._options=e:r.current={...Ue(e),formState:t};const n=r.current.control,i=s.useCallback((e=>{w(e,n._proxyFormState,!0)&&(n._formState={...n._formState,...e},a({...n._formState}))}),[n]);return D({subject:n._subjects.state,callback:i}),s.useEffect((()=>{n._stateFlags.mount||(n._proxyFormState.isValid&&n._updateValid(),n._stateFlags.mount=!0),n._stateFlags.watch&&(n._stateFlags.watch=!1,n._subjects.state.next({})),n._removeUnmounted()})),r.current.formState=F(t,n._proxyFormState),r.current}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,