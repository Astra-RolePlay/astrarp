"use strict";(self.webpackChunknpwd_advertisements=self.webpackChunknpwd_advertisements||[]).push([[890,246],{9352:(e,t,n)=>{n.d(t,{path:()=>r});var a=n(4147);n(4023),n(2950);const r=`/${a.u2}`},4023:(e,t,n)=>{n.d(t,{Z:()=>$});var a=n(2950),r=n.n(a),o=n(5475),l=n(6235),i=n(3839),c=n.n(i),d=n(6501),s=n(4810),u=n(4172),m=n(2004),p=n(8039),h=n(9845),v=n(1551),x=n(9352),f=n(7195),b=n(5598),g=n(2244),k=n(5137),E=n(304),Z=n(7405);const w=c()(d.Z)`
  flex: 1;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  max-height: 100%;
`,y=c().div`
  flex: 1;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  padding: 1.5rem;
  max-height: calc(100% - 3.5rem - ${v.M});
  overflow: auto;
`,R=e=>{const t=(0,k.useSetRecoilState)(E.U),{pathname:n}=(0,l.useLocation)(),[i,c]=(0,a.useState)(n);return(0,o.useNuiEvent)({event:g.M.UpdateNUI,callback:()=>{return e=void 0,n=void 0,r=function*(){console.log("Updating advertisements from UpdateNUI event!");const e=yield(0,Z.Z)(g.M.GetAdvertisements);t(e)},new((a=void 0)||(a=Promise))((function(t,o){function l(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(l,i)}c((r=r.apply(e,n||[])).next())}));var e,n,a,r}}),r().createElement(s.Z,{injectFirst:!0},r().createElement(p.Z,{mode:e.theme.palette.mode},r().createElement(w,{square:!0,elevation:0},r().createElement(v.Z,null,"Advertisements"),r().createElement(y,null,r().createElement(l.Route,{exact:!0,path:x.path},r().createElement(f.Z,null)),r().createElement(l.Route,{path:`${x.path}/create`},r().createElement(b.Z,null))),r().createElement(u.Z,{value:i,onChange:(e,t)=>{c(t)},showLabels:!0},r().createElement(m.Z,{label:"Advertisements",value:x.path,component:l.NavLink,icon:r().createElement(h.ListAltRounded,null),to:x.path}),r().createElement(m.Z,{label:"Create",value:`${x.path}/create`,color:"secondary",component:l.NavLink,icon:r().createElement(h.AddRounded,null),to:`${x.path}/create`})))))},$=e=>r().createElement(k.RecoilRoot,{override:!0,key:"npwd_advertisements"},r().createElement(o.NuiProvider,null,r().createElement(R,Object.assign({},e))))},4274:(e,t,n)=>{n.d(t,{Wb:()=>c,$_:()=>d,np:()=>s});var a=n(25),r=n(6115);const o=a.Z[700],l=r.Z.white,i=r.Z.black,c={palette:{mode:"light",primary:{main:o,dark:a.Z[900],light:a.Z[600],contrastText:l},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:l},success:{main:"#2196f3",contrastText:l}}},d={palette:{mode:"dark",primary:{main:o,dark:a.Z[900],light:a.Z[500],contrastText:i},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:l},success:{main:"#2196f3",contrastText:l},background:{default:"#121212",paper:"#322f29"}}},s={light:c,dark:d}},8890:(e,t,n)=>{n.r(t);var a=n(2950),r=n.n(a),o=n(2181),l=n.n(o),i=(n(9352),n(6235),n(3839)),c=n.n(i);n(4023),n.p,n(5475),n(5137),n(5142),n(6447),n(2347),n(4274),c().div`
  position: relative;
  width: 500px;
  height: 1000px;
`,c().div`
  background: url(${({src:e})=>e});
  position: absolute;
  z-index: 100;
  width: 500px;
  height: 1000px;
  pointer-events: none;
`,c().div`
  z-index: 2;
  position: absolute;
  bottom: 100px;
  left: 50px;
  right: 50px;
  top: 100px;
  display: flex;
  flex-direction: column;
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
  border-radius: 20px;
  overflow: hidden;
`,l().render(r().createElement((()=>null),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,